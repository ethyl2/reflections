What happens when you initialize a repository? Why do you need to do it?

It creates an empty .git file in your directory. Without it, your directory is just
a normal one and not a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It is an intermediate place, which allows you to selectively pick
which files you want to add to your commit. You can use git status
to make sure you have included what you want.

How can you use the staging area to make sure you have one commit per logical
change?

Pretty much the same as the question above. Also, you can use git diff
to see the differences between the file in the working directory and the
staging area, as well as git diff --staged to see the differences in the fill
in the staging area and in the most recent commit in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches could be very useful when you want to create different variations or
versions of a project, and you want to keep the main project separate from those.
Each variation can have its own branch and continue with commits as those variations
are developed.

How do the diagrams help you visualize the branch structure?

They help to show the relationships between the master and the branches, to see
where the branches started and the commits that they contain.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Git merges combines the second branch into the first one, and a new commit for the
first branch (the one that's checked out). According to the course content, the
way git auto-merges is by keeping the lines that are in common with both, taking
out lines that appeared in the parent file but not in one of the new versions of
the file, and adding new lines that did not appear in the parent file but are in
one of the new files. We represent it in the diagram to show how the branches come
together as a result of the merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Pro of automatic merging is that it is fast and easy -- you don't have to make
any judgment calls. The con is that you have no input into how the commits are
merged. Pro of manual merging is that you can say exactly which lines you want to
include in your new commit. The con is that you might make a mistake or two because
you are a human.
