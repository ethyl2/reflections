When would you want to use a remote repository rather than keeping all your work
local?

    The main reason, I think, is to be able to share your repository! Also,
    it never hurts to have a backup of your work in case something happens
    to your local files.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I guess you might want to try things out with a file locally that you don't
    necessarily want updated with whatever is in your GitHub repository.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are created by making copies of a repository from a local location to
    another local location, or from GitHub to a local location. Forks, however,
    are when you request GitHub to clone the project and register it under your
    username on Github, not a local location. "GitHub also keeps track of the
    relationship between the two repositories, so you can visualize the commits
    and pulls between the two projects (and other forks)."
    (https://stackoverflow.com/questions/7057194/
    what-is-the-difference-between-forking-and-cloning-on-github)
    You can create branches within a repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can update just the local copy of the remote branch, leaving your actual
    local version alone, using git fetch. Then you can use git log and git diff
    to see what changes were made. Later, you can merge. Here's one situation
    example from cbuckley: "If I am about to go without Internet
    access for a while, for example to work on a plane, I can update my local
    copy before I leave. I can do this even if I'm not ready to merge those
    changes into my own branches yet.  Then if I want, I can perform the merge
    while offline, or I need to know what the remote version is at some point,
    I have an easy way to access it."
    (https://github.com/cbuckey-uda/reflections/blob/master/
    lesson_3_reflections.txt)

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I use Google docs quite often to collaborate with others, mostly not in
    coding situations, though. I appreciate being able to easily share documents
    with other people, and the ability to update the documents and instantly
    have other people see the updated versions. Without git or GitHub, I would
    probably use Google docs. If that wasn't available, email or thumb drives
    would have to do.

    The only easier thing that I can think of, with Google docs versus git and
    GitHub, is that everything on Google docs is visual, with menus and
    graphics, while git especially requires a terminal and remembering what
    commands to type. However, git and GitHub are better tools for code
    collaboration, with features such as forking, cloning, pushing, and merging.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Making changes in a separate branch allows you to explore other approaches
    to writing the code, before merging it with your master. I think a main
    advantage is that it makes it easier to explore other people's pull requests.
    Cbuckley stresses that separate branches are especially helpful with larger
    groups all working on the same code: "When working with a large group,
    though, using branches to keep track of which changes have already been
    reviewed and approved is extremely helpful."

    The benefit to making changes directly to master is that you don't have to
    go through the somewhat-lengthy process, described in the course: "Making
    changes in a separate branch is more complicated than working directly
    in master, especially when you need to stay up-to-date with changes others
    are making. Rather than simply pulling and pushing, you need to pull changes
    into your local master branch, merge the local master into your branch
    (different-oil, in our case), then push your branch to the remote before
    finally merging your branch into master, either locally or on GitHub."
